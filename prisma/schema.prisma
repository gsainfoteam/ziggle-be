// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum FileType {
  IMAGE
  DOCUMENT
}

model User {
  uuid      String   @id
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  consent   Boolean

  remindedNotices Notice[]   @relation("Reminder")
  writedNotices   Notice[]
  fcmTokens       FcmToken[]
  reactions       Reaction[]
}

model File {
  uuid      String   @id @default(uuid())
  order     Int      @default(0)
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  url       String
  type      FileType

  noticeId Int    @map("notice_id")
  notice   Notice @relation(fields: [noticeId], references: [id])
}

model Content {
  id Int

  lang      String
  title     String?
  body      String    @db.LongText
  deadline  DateTime?
  createdAt DateTime  @default(now()) @map("created_at")

  noticeId Int    @map("notice_id")
  notice   Notice @relation(fields: [noticeId], references: [id])

  @@id([id, lang, noticeId])
}

model Tag {
  id Int @id @default(autoincrement())

  name String @unique

  notices Notice[]
}

model Notice {
  id Int @id @default(autoincrement())

  views           Int       @default(0)
  currentDeadline DateTime? @map("current_deadline")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  authorId  String     @map("author_id")
  reminders User[]     @relation("Reminder")
  author    User       @relation(fields: [authorId], references: [uuid])
  files     File[]
  contents  Content[]
  tags      Tag[]
  reactions Reaction[]
}

model Reaction {
  emoji     String
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  noticeId Int    @map("notice_id")
  notice   Notice @relation(fields: [noticeId], references: [id])
  userId   String @map("user_id")
  user     User   @relation(fields: [userId], references: [uuid])

  @@id([emoji, noticeId, userId])
}

model FcmToken {
  token        String   @id
  createdAt    DateTime @default(now()) @map("created_at")
  lastCheckAt  DateTime @updatedAt @map("last_check_at")
  successCount Int      @default(0) @map("success_count")
  failCount    Int      @default(0) @map("fail_count")
  errors       String?

  userUuid String? @map("user_uuid")
  user     User?   @relation(fields: [userUuid], references: [uuid])
}
