generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FileType {
  IMAGE
  DOCUMENT
}

enum CrawlType {
  ACADEMIC
}

model User {
  uuid      String   @id @db.Uuid
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  consent   Boolean

  remindedNotices Notice[]   @relation("Reminder")
  writedNotices   Notice[]
  reactions       Reaction[]

  @@map("user")
}

model Group {
  name String @id

  Notice Notice[]
}

model File {
  uuid      String   @id @default(uuid())
  order     Int      @default(0)
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  url       String
  type      FileType

  noticeId Int    @map("notice_id")
  notice   Notice @relation(fields: [noticeId], references: [id])

  @@map("file")
}

model Content {
  id Int

  lang      String
  title     String?
  body      String
  deadline  DateTime?
  createdAt DateTime  @default(now()) @map("created_at")

  noticeId Int    @map("notice_id")
  notice   Notice @relation(fields: [noticeId], references: [id])

  @@id([id, lang, noticeId])
  @@map("content")
}

model Crawl {
  id        Int       @id @default(autoincrement())
  title     String
  body      String
  type      CrawlType
  url       String    @db.VarChar(300)
  crawledAt DateTime  @default(now()) @map("crawled_at")

  noticeId Int    @map("notice_id")
  notice   Notice @relation(fields: [noticeId], references: [id])

  @@map("crawl")
}

model Tag {
  id Int @id @default(autoincrement())

  name String @unique

  notices Notice[]

  @@map("tag")
}

model Notice {
  id Int @id @default(autoincrement())

  views           Int       @default(0)
  currentDeadline DateTime? @map("current_deadline")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @map("updated_at")
  publishedAt     DateTime? @map("published_at")
  deletedAt       DateTime? @map("deleted_at")

  authorId  String     @map("author_id")
  reminders User[]     @relation("Reminder")
  author    User       @relation(fields: [authorId], references: [uuid])
  files     File[]
  contents  Content[]
  cralws    Crawl[]
  tags      Tag[]
  reactions Reaction[]
  group     Group?     @relation(fields: [groupName], references: [name])
  groupName String?    @map("group_name")

  @@map("notice")
}

model Reaction {
  emoji     String
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  noticeId Int    @map("notice_id")
  notice   Notice @relation(fields: [noticeId], references: [id])
  userId   String @map("user_uuid")
  user     User   @relation(fields: [userId], references: [uuid])

  @@id([emoji, noticeId, userId])
  @@map("reaction")
}
